module Test.Map;

open import Stdlib.Prelude;
open import Test.JuvixUnit;

import Data.Map as Map;
open Map using {FiniteMap};

import Data.Ord as Ord;
open Ord using {Ord;ord};

import Data.Eq as Eq;

tests : List Test;
tests :=
  let
    m : FiniteMap Nat String;
    m :=
      Map.bind 2 "two" (Map.bind 1 "one" (Map.empty Ord.nat));
    m2 : FiniteMap Nat Nat;
    m2 := Map.bind 3 4 (Map.bind 1 2 (Map.empty Ord.nat));
    terminating
    quickSort : {A : Type} → Ord A → List A → List A;
    quickSort _ nil := nil;
    quickSort _ (x :: nil) := x :: nil;
    quickSort {A} o (x :: xs) :=
      let
        qsHelper : A → List A × List A → List A;
        qsHelper a (l, r) := l ++ (a :: nil) ++ r;
        isGT : A -> Bool;
        isGT := Ord.gt o x;
      in qsHelper x (both (quickSort o) (partition isGT xs));
    assertEqListPair :
        List (Nat × Nat) -> List (Nat × Nat) -> Assertion;
    assertEqListPair actual expected :=
      assertEqual
        (Eq.list (Eq.pair Eq.nat Eq.nat))
        "lists are not equal"
        (quickSort (Ord.pair Ord.nat Ord.nat) actual)
        expected;
  in testCase
      "Map.lookup missing key"
      (assertNothing
        (const "found a key expected to be missing")
        (Map.lookup 10 m))
    :: testCase
      "Map.lookup available key"
      (assertJust "could not find expected key" (Map.lookup 2 m))
    :: testCase
      "Map.length computes the number of keys in the map"
      (assertEqual Eq.nat "expected length 2" (Map.length m) 2)
    :: testCase
      "Map.to-list computes the expected members"
      (assertEqListPair
        (Map.to-list m2)
        ((1, 2) :: (3, 4) :: nil))
    :: testCase
      "Map.bind-with replaces duplicates using merge function"
      (assertEqListPair
        (Map.to-list (Map.bind-with (+) 1 3 m2))
        ((1, 5) :: (3, 4) :: nil))
    :: testCase
      "Map.from-list-with de-duplicates using merge function"
      (assertEqListPair
        (Map.to-list
          (Map.from-list-with Ord.nat (+) ((1, 1) :: (1, 2) :: nil)))
        ((1, 3) :: nil))
    :: nil;

main : IO;
main := runTestSuite (testSuite "Map" tests);
