module Test.Map;

import Stdlib.Prelude open;
import Test.JuvixUnit open;

import Data.Map as Map;
open Map using {Map};

tests : List Test :=
  let
    m : Map Nat String;
    m :=
      Map.insert
        NatTraits.Ord
        2
        "two"
        (Map.insert NatTraits.Ord 1 "one" Map.empty);
    m2 : Map Nat Nat;
    m2 :=
      Map.insert
        NatTraits.Ord
        3
        4
        (Map.insert NatTraits.Ord 1 2 Map.empty);
    assertEqListPair :
      List (Nat × Nat) -> List (Nat × Nat) -> Assertion;
    assertEqListPair actual expected :=
      assertEqual
        (ListTraits.Eq (ProductTraits.Eq NatTraits.Eq NatTraits.Eq))
        "lists are not equal"
        (quickSort
          (ProductTraits.Ord NatTraits.Ord NatTraits.Ord)
          actual)
        expected;
  in testCase
      "Map.lookup missing key"
      (assertNothing
        (const "found a key expected to be missing")
        (Map.lookup NatTraits.Ord 10 m))
    :: testCase
      "Map.lookup available key"
      (assertJust
        "could not find expected key"
        (Map.lookup NatTraits.Ord 2 m))
    :: testCase
      "Map.length computes the number of keys in the map"
      (assertEqual
        NatTraits.Eq
        "expected length 2"
        (Map.size m)
        2)
    :: testCase
      "Map.toList computes the expected members"
      (assertEqListPair (Map.toList m2) ((1, 2) :: (3, 4) :: nil))
    :: testCase
      "Map.insert-with replaces duplicates using merge function"
      (assertEqListPair
        (Map.toList (Map.insertWith NatTraits.Ord (+) 1 3 m2))
        ((1, 5) :: (3, 4) :: nil))
    :: testCase
      "Map.fromListWith de-duplicates using merge function"
      (assertEqListPair
        (Map.toList
          (Map.fromListWith
            NatTraits.Ord
            (+)
            ((1, 1) :: (1, 2) :: nil)))
        ((1, 3) :: nil))
    :: testCase
      "Map.fromList can be used to create the empty Map"
      (assertEqListPair
        (Map.toList (Map.fromList NatTraits.Ord nil))
        (nil))
    :: testCase
      "Map.fromList overwrites duplicates"
      (assertEqListPair
        (Map.toList
          (Map.fromList NatTraits.Ord ((1, 1) :: (1, 2) :: nil)))
        ((1, 2) :: nil))
    :: testCase
      "Map.fromList distinct keys"
      (assertEqListPair
        (Map.toList
          (Map.fromList NatTraits.Ord ((1, 1) :: (2, 2) :: nil)))
        ((1, 1) :: (2, 2) :: nil))
    :: nil;

main : IO := runTestSuite (testSuite "Map" tests);
