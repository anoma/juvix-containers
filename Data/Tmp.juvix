--- the functions here should be eventually put in the stdlib
module Data.Tmp;

open import Stdlib.Prelude;

unlines : List String -> String;
unlines nil := "";
unlines (x :: xs) := x ++str "\n" ++str unlines xs;

zipWith :
  {A : Type}
    -> {B : Type}
    -> {C : Type}
    -> (A -> B -> C)
    -> List A
    -> List B
    -> List C;
zipWith {A} {B} {C} f as bs :=
  let
    go : List A -> List B -> List C -> List C;
    go _ nil acc := acc;
    go nil _ acc := acc;
    go (a :: az) (b :: bz) acc := go az bz (f a b :: acc);
  in reverse (go as bs nil);

catMaybes : {A : Type} -> List (Maybe A) -> List A;
catMaybes nil := nil;
catMaybes (just h :: hs) := h :: catMaybes hs;
catMaybes (nothing :: hs) := catMaybes hs;

concatMap : {A B : Type} -> (A -> List B) -> List A -> List B;
concatMap f := flatten âˆ˜ map f;
