module Data.Set;

import Data.Ord as Ord;
open Ord using {Ord;ord};
open import Stdlib.Prelude hiding {length};

import Data.Eq as Eq;
open Eq using {Eq};
open import Test.JuvixUnit;

import Stdlib.Data.Nat.Ord as Nat;
import Stdlib.Data.Ord as Ord;

import Data.BinaryTree as Tree;
open Tree using {BinaryTree;binaryTree;leaf;node};

type UnbalancedSet (A : Type) :=
  | unbalancedSet : Ord A
      -> BinaryTree A
      -> UnbalancedSet A;

Set : Type -> Type;
Set A := UnbalancedSet A;

empty : {A : Type} -> Ord A -> UnbalancedSet A;
empty o := unbalancedSet o leaf;

member? : {A : Type} -> A -> UnbalancedSet A -> Bool;
member? {A} x (unbalancedSet o t) :=
  let
    go : BinaryTree A -> Bool;
    go leaf := false;
    go (node l y r) :=
      if (Ord.lt o x y) (go l) (if (Ord.lt o y x) (go r) true);
  in go t;

insert :
  {A : Type} -> A -> UnbalancedSet A -> UnbalancedSet A;
insert {A} x (unbalancedSet o@(ord cmp) t) :=
  let
    go : BinaryTree A -> BinaryTree A;
    go leaf := node leaf x leaf;
    go n@(node l y r) :=
      case cmp x y
        | Ord.LT := node (go l) y r
        | Ord.EQ := n
        | Ord.GT := node l y (go r);
  in unbalancedSet o (go t);

length : {A : Type} -> UnbalancedSet A -> Nat;
length (unbalancedSet _ t) := Tree.length t;

to-list : {A : Type} -> UnbalancedSet A -> List A;
to-list (unbalancedSet _ t) := Tree.to-list t;

set-ordering : {A : Type} -> Ord A -> Ord (Set A);
set-ordering {A} o :=
  let
    from-ord-list : Ord (List A) -> Ord (Set A);
    from-ord-list (ord cmp) :=
      ord
        Î» {
          | s1 s2 := cmp (to-list s1) (to-list s2)
        };
  in from-ord-list (Ord.list o);
