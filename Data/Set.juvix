module Data.Set;

open import Data.Ord;
open import Data.Tree;
open import Stdlib.Prelude;
open import Data.Eq;
open import Test.JuvixUnit;

import Stdlib.Data.Nat.Ord as Nat;
import Stdlib.Data.Ord as Ord;

type UnbalancedSet (A : Type) :=
  | unbalancedSet : Ord A
      -> BinaryTree A
      -> UnbalancedSet A;

uset-empty : {A : Type} -> Ord A -> UnbalancedSet A;
uset-empty o := unbalancedSet o leaf;

uset-member? : {A : Type} -> A -> UnbalancedSet A -> Bool;
uset-member? {A} x (unbalancedSet o t) :=
  let
    go : BinaryTree A -> Bool;
    go leaf := false;
    go (node l y r) :=
      if
        (ordering-lt o x y)
        (go l)
        (if (ordering-lt o y x) (go r) true);
  in go t;

uset-insert : {A : Type} -> A -> UnbalancedSet A -> UnbalancedSet A;
uset-insert {A} x (unbalancedSet o@(ord cmp) t) :=
  let
    go : BinaryTree A -> BinaryTree A;
    go leaf := node leaf x leaf;
    go n@(node l y r) :=
      case (cmp x y)
      | Ord.LT := node (go l) y r
      | Ord.EQ := n
      | Ord.GT := node l y (go r)
  in unbalancedSet o (go t);

uset-size : {A : Type} -> UnbalancedSet A -> Nat;
uset-size (unbalancedSet _ t) := btree-size t;

-- TODO: Change to to-list
uset-members : {A : Type} -> UnbalancedSet A -> List A;
uset-members (unbalancedSet _ t) := btree-members t;

printNatListLn : List Nat â†’ IO;
printNatListLn nil := printStringLn "nil";
printNatListLn (x :: xs) :=
  printNat x >> printString " :: " >> printNatListLn xs;

s : UnbalancedSet Nat;
s :=
  uset-insert
    1
    (uset-insert
      3
      (uset-insert 2 (uset-insert 1 (uset-empty nat-ordering))));

tests : List Test;
tests :=
  testCase
      "uset-size computes the expected size"
      (assertEqual nat-eq "unexpected size" (uset-size s) 3)
    :: testCase
      "uset-members computes the expected members"
      (assertEqual
        (list-eq nat-eq)
        "unexpected memebrs"
        (quickSort nat-ordering (uset-members s))
        (1 :: 2 :: 3 :: nil))
    :: testCase
      "uset-member? computes true for expected member"
      (assertTrue "expected member is not present" (uset-member? 1 s))
    :: testCase
      "uset-member? computes false for unexpected member"
      (assertFalse "unexpected member is present" (uset-member? 0 s))
    :: nil;

main : IO;
main := runTestSuite (testSuite "Set" tests);
