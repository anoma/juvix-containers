module Data.Map;

open import Stdlib.Prelude hiding {length};

import Stdlib.Data.Nat.Ord as Nat;
import Data.Set as Set;
import Data.Tree as Tree;
import Stdlib.Data.Ord as Ord;
import Data.Eq as Eq;

open import Test.JuvixUnit;

import Data.Ord as Ordering;
open Ordering using {Ord;ord};

type Binding (A B : Type) :=
  | binding : A -> B -> Binding A B;

key : {A B : Type} -> Binding A B -> A;
key (binding a _) := a;

value : {A B : Type} -> Binding A B -> B;
value (binding _ b) := b;

to-pair : {A B : Type} -> Binding A B -> A × B;
to-pair (binding a b) := a, b;

binding-key-ordering :
  {A B : Type} -> Ord A -> Ord (Binding A B);
binding-key-ordering (ord cmp) :=
  ord
    λ {
      | b1 b2 := cmp (key b1) (key b2)
    };

type FiniteMap (A B : Type) :=
  | finiteMap : Ord A
      -> Set.UnbalancedSet (Binding A B)
      -> FiniteMap A B;

empty : {A B : Type} -> Ord A -> FiniteMap A B;
empty o := finiteMap o (Set.empty (binding-key-ordering o));

bind-with :
  {A B : Type}
    -> (B -> B -> B)
    -> A
    -> B
    -> FiniteMap A B
    -> FiniteMap A B;
bind-with {A} {B} f k v (finiteMap o@(ord cmp) (Set.unbalancedSet _ t)) :=
  let
    go :
        Tree.BinaryTree (Binding A B)
          -> Tree.BinaryTree (Binding A B);
    go Tree.leaf := Tree.node Tree.leaf (binding k v) Tree.leaf;
    go n@(Tree.node l b r) :=
      let
        mergeBinding : Binding A B;
        mergeBinding := binding (key b) (f (value b) v);
      in case cmp k (key b)
        | Ord.EQ := Tree.node l mergeBinding r
        | Ord.LT := Tree.node (go l) b r
        | Ord.GT := Tree.node l b (go r);
  in finiteMap
    o
    (Set.unbalancedSet (binding-key-ordering o) (go t));

bind :
  {A B : Type} -> A -> B -> FiniteMap A B -> FiniteMap A B;
bind :=
  bind-with
    λ {
      | old new := new
    };

lookup : {A B : Type} -> A -> FiniteMap A B -> Maybe B;
lookup {A} {B} k (finiteMap (ord cmp) (Set.unbalancedSet _ t)) :=
  let
    go : Tree.BinaryTree (Binding A B) -> Maybe B;
    go Tree.leaf := nothing;
    go (Tree.node l b r) :=
      case cmp k (key b)
        | Ord.EQ := just (value b)
        | Ord.LT := go l
        | Ord.GT := go r;
  in go t;

from-list-with :
  {A B : Type}
    -> Ord A
    -> (B -> B -> B)
    -> List (A × B)
    -> FiniteMap A B;
from-list-with o f :=
  foldl
    λ {
      | m (k, v) := bind-with f k v m
    }
    (empty o);

to-list : {A B : Type} -> FiniteMap A B -> List (A × B);
to-list (finiteMap _ s) := map to-pair (Set.to-list s);

length : {A B : Type} -> FiniteMap A B -> Nat;
length (finiteMap _ uset) := Set.length uset;

tests : List Test;
tests :=
  let
    m : FiniteMap Nat String;
    m :=
      bind 2 "two" (bind 1 "one" (empty Ordering.nat-ordering));
    m2 : FiniteMap Nat Nat;
    m2 := bind 3 4 (bind 1 2 (empty Ordering.nat-ordering));
    assertEqListPair :
        List (Nat × Nat) -> List (Nat × Nat) -> Assertion;
    assertEqListPair actual expected :=
      assertEqual
        (Eq.list-eq (Eq.pair-eq Eq.nat-eq Eq.nat-eq))
        "lists are not equal"
        (Ordering.quickSort
          (Ordering.pair-ordering
            Ordering.nat-ordering
            Ordering.nat-ordering)
          actual)
        expected;
  in testCase
      "finmap-lookup missing key"
      (assertNothing
        (const "found a key expected to be missing")
        (lookup 10 m))
    :: testCase
      "finmap-lookup available key"
      (assertJust "could not find expected key" (lookup 2 m))
    :: testCase
      "length computes the number of keys in the map"
      (assertEqual Eq.nat-eq "expected length 2" (length m) 2)
    :: testCase
      "to-list computes the expected members"
      (assertEqListPair (to-list m2) ((1, 2) :: (3, 4) :: nil))
    :: testCase
      "finmap-bind-with replaces duplicates using merge function"
      (assertEqListPair
        (to-list (bind-with (+) 1 3 m2))
        ((1, 5) :: (3, 4) :: nil))
    :: testCase
      "from-list-with de-duplicates using merge function"
      (assertEqListPair
        (to-list
          (from-list-with
            Ordering.nat-ordering
            (+)
            ((1, 1) :: (1, 2) :: nil)))
        ((1, 3) :: nil))
    :: nil;

main : IO;
main := runTestSuite (testSuite "Map" tests);
