--- N-Ary trees with pretty printing.
module Data.Tree;

import Stdlib.Prelude open;

--- A ;List; of trees.
Forest : Type -> Type
  
  | A := List (Tree A);

--- N-Ary tree.
positive
type Tree (A : Type) :=
  | node : A -> List (Tree A) -> Tree A;

shift : String -> String -> List String -> List String
  | first other xs :=
    zipWith (++str) (first :: replicate (length xs) other) xs;

draw : {A : Type} -> Show A -> Tree A -> List String
  
  | {A} s@(mkShow fshow) (node v cs) :=
    let
      go : Tree A -> List String;
      go := draw s;
    in fshow v :: drawForest s cs;

drawForest : {A : Type} -> Show A -> Forest A -> List String
  
  | s nil := nil
  | s (h :: nil) := "|" :: shift "`- " "   " (draw s h)
  | s (h :: hs) :=
    "|" :: shift "+- " "|  " (draw s h) ++ drawForest s hs;

treeToString : {A : Type} -> Show A -> Tree A -> String
  | s := unlines ∘ draw s;

forestToString : {A : Type} -> Show A -> Forest A -> String
  | s := unlines ∘ drawForest s;
