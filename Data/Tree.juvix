--- N-Ary trees with pretty printing.
module Data.Tree;

import Stdlib.Prelude open;

--- A ;List; of trees.
Forest : Type -> Type;

--- N-Ary tree.
positive
type Tree (A : Type) :=
  | node : A -> Forest A -> Tree A;

Forest A := List (Tree A);

shift : String -> String -> List String -> List String;
shift first other xs :=
  zipWith (++str) (first :: replicate (length xs) other) xs;

draw : {A : Type} -> Show A -> Tree A -> List String;

drawForest :
  {A : Type} -> Show A -> Forest A -> List String;

draw {A} s@(mkShow fshow) (node v cs) :=
  let
    go : Tree A -> List String;
    go := draw s;
  in fshow v :: drawForest s cs;

drawForest s nil := nil;
drawForest s (h :: nil) :=
  "|" :: shift "`- " "   " (draw s h);
drawForest s (h :: hs) :=
  "|" :: shift "+- " "|  " (draw s h) ++ drawForest s hs;

treeToString : {A : Type} -> Show A -> Tree A -> String;
treeToString s := unlines ∘ draw s;

forestToString : {A : Type} -> Show A -> Forest A -> String;
forestToString s := unlines ∘ drawForest s;
