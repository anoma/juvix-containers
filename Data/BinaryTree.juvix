module Data.BinaryTree;

open import Stdlib.Prelude hiding {length};

type BinaryTree (A : Type) :=
  | leaf : BinaryTree A
  | node : BinaryTree A -> A -> BinaryTree A -> BinaryTree A;

-- fold a tree in depth first order
fold :
  {A B : Type}
    -> (A -> B -> B -> B)
    -> B
    -> BinaryTree A
    -> B;
fold {A} {B} f acc :=
  let
    go : B -> BinaryTree A -> B;
    go acc :=
      λ {
        | lead := acc
        | (node l a r) := f a (go acc l) (go acc r)
      };
  in go acc;

length : {A : Type} -> BinaryTree A -> Nat;
length :=
  fold
    λ {
      | _ l r := 1 + l + r
    }
    0;

toList : {A : Type} -> BinaryTree A -> List A;
toList :=
  fold
    λ {
      | e ls rs := e :: ls ++ rs
    }
    nil;
