module Data.Ordering;

open import Stdlib.Prelude;
open import Stdlib.Data.Nat.Ord;

-- A totally ordered type and comparison functions (eq, lt, leq).
type Ordering (A : Type) :=
  | ordering : (A -> A -> Bool)
      -> (A -> A -> Bool)
      -> (A -> A -> Bool)
      -> Ordering A;

ordering-eq : {A : Type} -> Ordering A -> A -> A -> Bool;
ordering-eq (ordering eq _ _) := eq;

ordering-lt : {A : Type} -> Ordering A -> A -> A -> Bool;
ordering-lt (ordering _ lt _) := lt;

ordering-leq : {A : Type} -> Ordering A -> A -> A -> Bool;
ordering-leq (ordering _ _ leq) := leq;

ordering-gt : {A : Type} -> Ordering A -> A -> A -> Bool;
ordering-gt ord a1 a2 := not (ordering-leq ord a1 a2);

nat-ordering : Ordering Nat;
nat-ordering := ordering (==) (<) (<=);

terminating
quickSort : {A : Type} → Ordering A → List A → List A;
quickSort _ nil := nil;
quickSort _ (x :: nil) := x :: nil;
quickSort {A} ord (x :: xs) :=
  let
    qsHelper : A → List A × List A → List A;
    qsHelper a (l, r) := l ++ (a :: nil) ++ r;
    isGT : A -> Bool;
    isGT := ordering-gt ord x;
  in qsHelper x (both (quickSort ord) (partition isGT xs));
