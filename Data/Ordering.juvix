module Data.Ordering;

open import Stdlib.Prelude;
open import Stdlib.Data.Nat.Ord;

-- A totally ordered type and comparison functions (eq, lt, leq).
type Ordering (A : Type) :=
  | ordering : (A -> A -> Bool) -> (A -> A -> Bool) -> (A -> A -> Bool) -> Ordering A;

ordering-eq : {A : Type} -> Ordering A -> (A -> A -> Bool);
ordering-eq (ordering eq _ _ ) := eq;

ordering-lt : {A : Type} -> Ordering A -> (A -> A -> Bool);
ordering-lt (ordering _ lt _) := lt;

ordering-leq : {A : Type} -> Ordering A -> (A -> A -> Bool);
ordering-leq (ordering _ _ leq) := leq;

nat-ordering : Ordering Nat;
nat-ordering := ordering (==) (<) (<=);

end;
