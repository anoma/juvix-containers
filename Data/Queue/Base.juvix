--- This module provides an implementation of a First-In, First-Out (FIFO)
--- queue based on Okasaki's "Purely Functional Data Structures." Ch.3.
---
--- This Okasaki Queue version data structure ensures worst-case constant-time
--- performance for basic operations such as push, pop, and front.
---
--- The OkasakiQueue consists of two lists (front and back) to separate
--- the concerns of adding and removing elements for ensuring efficient
--- performance.
module Data.Queue.Base;

open import Stdlib.Prelude;

--- A first-in-first-out data structure
type Queue (A : Type) :=
  | queue : List A -> List A -> Queue A;

--- 𝒪(1). The empty ;Queue;.
empty : {A : Type} -> Queue A;
empty := queue nil nil;

--- 𝒪(1). Returns ;true; when the ;Queue; has no elements.
isEmpty : {A : Type} -> Queue A -> Bool;
isEmpty (queue nil nil) := true;
isEmpty _ := false;

--- 𝒪(1). Returns first element of the ;Queue;, if any.
head : {A : Type} -> Queue A -> Maybe A;
head (queue nil _) := nothing;
head (queue (x :: _) _) := just x;

--- 𝒪(1). Removes the first element from the ;Queue;. If the ;Queue; is empty then returns ;nothing;.
tail : {A : Type} -> Queue A -> Maybe (Queue A);
tail (queue nil _) := nothing;
tail (queue (_ :: front) back) := just (queue front back);

--- 𝒪(n) in the worst-case scenario, but 𝒪(1) amortized 
--- due to infrequentcalls. 
check : {A : Type} -> Queue A -> Queue A;
check (queue nil back) := queue (reverse back) nil;
check q := q;

--- 𝒪(1). Removes the first element from the ;Queue;. 
--- If the ;Queue; is empty then returns ;nothing;.
pop : {A : Type} -> Queue A -> Maybe (A × Queue A);
pop (queue nil _) := nothing;
pop (queue (x :: front) back) :=
  just (x, check (queue front back));

--- 𝒪(1). Adds an element to the end of the ;Queue;.
push : {A : Type} -> A -> Queue A -> Queue A;
push x (queue front back) :=
  check (queue front (x :: back));

--- 𝒪(n). Adds a list of elements to the end of the ;Queue;.
pushMany : {A : Type} -> List A -> Queue A -> Queue A;
pushMany xs q := foldr push q xs;

--- 𝒪(n). Build a ;Queue; from a ;List;.
fromList : {A : Type} -> List A -> Queue A;
fromList xs := pushMany xs empty;

--- toList: O(n). Returns a ;List; of the elements in the ;Queue;.
--- The elements are in the same order as they appear in the ;Queue;
--- (i.e. the first element of the ;Queue; is the first element of the ;List;).
toList : {A : Type} -> Queue A -> List A;
toList (queue front back) :=
  reverse (front ++ reverse back);

--- 𝒪(n). Returns the number of elements in the ;Queue;.
size : {A : Type} -> Queue A -> Nat;
size (queue front back) := length front + length back;

module QueueTraits;
  
  Eq : {A : Type} -> Eq A -> Eq (Queue A);
  Eq {A} eq-a :=
    let
      list-eq : List A -> List A -> Bool;
      list-eq := eq (ListTraits.Eq eq-a);
      go : Queue A -> Queue A -> Bool;
      go q1 q2 := list-eq (toList q1) (toList q2);
    in mkEq go;
  
  Show : {A : Type} -> Show A -> Show (Queue A);
  Show showA :=
    mkShow
      λ {
        | q := show (ListTraits.Show showA) (toList q)
      };
  
  Ord : {A : Type} -> Ord A -> Ord (Queue A);
  Ord {A} ord-A :=
    let
      go : Queue A -> Queue A -> Ordering;
      go q1 q2 :=
        cmp (ListTraits.Ord ord-A) (toList q1) (toList q2);
    in mkOrd go;

end;
